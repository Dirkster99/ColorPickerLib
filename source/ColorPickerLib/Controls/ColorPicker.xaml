<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:controls="clr-namespace:ColorPickerLib.Controls"
	xmlns:conv="clr-namespace:ColorPickerLib.Converters"
	xmlns:localiz="clr-namespace:ColorPickerLib.Localized"
	xmlns:themes="clr-namespace:ColorPickerLib.Themes">

	<!--  ===============================================================================  -->
	<!--  ColorPicker  -->
	<!--  ===============================================================================  -->

	<conv:InverseBoolConverter x:Key="InverseBoolConverter" />
	<conv:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

	<!--  Color Picker drop down button that opens the color picker when clicked  -->
	<Style
		x:Key="ColorPickerToggleButtonStyle"
		BasedOn="{StaticResource {x:Type ToggleButton}}"
		TargetType="ToggleButton">
		<!--  Setter Property="Background" Value="White" /  -->
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

							<ToggleButton
								x:Name="ToggleButtonChrome"
								Grid.Column="1"
								Padding="0"
								Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="0"
								IsChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=controls:ColorPicker}}"
								Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=controls:ColorPicker}, Converter={StaticResource BooleanToVisibilityConverter}}">
								<!--
									ButtonChrome + CornerRadius
									RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=controls:ColorPicker}}"
									RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=controls:ColorPicker}}"
									RenderMouseOver="{TemplateBinding IsMouseOver}"
									RenderPressed="{TemplateBinding IsPressed}"
								-->

								<Grid
									x:Name="arrowGlyph"
									Grid.Column="1"
									Margin="3,0"
									IsHitTestVisible="False">
									<Path
										x:Name="Arrow"
										Width="7"
										Height="4"
										Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
										Fill="{DynamicResource {x:Static themes:ResourceKeys.GlyphNormalForegroundKey}}" />
								</Grid>
							</ToggleButton>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static themes:ResourceKeys.GlyphDisabledForegroundKey}}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" Value="Transparent" />
							<Setter TargetName="ToggleButtonChrome" Property="Background" Value="Transparent" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ColorDisplayStyle" TargetType="ContentControl">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border Background="{DynamicResource CheckerBrush}">
						<Rectangle Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=controls:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=controls:ColorPicker}}" Value="{x:Null}">
				<Setter Property="Visibility" Value="Collapsed" />
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ColorItemContainerStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="ToolTip" Value="{Binding Name}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid ToolTip="{Binding Name}">
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
						<Border
							x:Name="_outerBorder"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Background="Transparent"
							BorderBrush="Transparent"
							BorderThickness="1">
							<Border
								x:Name="_innerBorder"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="1" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
							<Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="_outerBorder" Property="BorderBrush" Value="#FFFF0000" />
							<Setter TargetName="_innerBorder" Property="BorderBrush" Value="#FFFFFF00" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<DataTemplate x:Key="ColorItemTemplate">
		<Grid>
			<Border
				Margin="2,2,2,2"
				Background="{DynamicResource CheckerBrush}"
				BorderBrush="Black"
				BorderThickness="1">
				<Rectangle Width="14" Height="14">
					<Rectangle.Style>
						<Style TargetType="Rectangle">
							<Setter Property="Fill" Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
						</Style>
					</Rectangle.Style>
				</Rectangle>
			</Border>
		</Grid>
	</DataTemplate>

	<Style x:Key="ColorListStyle" TargetType="ListBox">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel Width="200" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle" Value="{StaticResource ColorItemContainerStyle}" />
		<Setter Property="ItemTemplate" Value="{StaticResource ColorItemTemplate}" />
		<Setter Property="SelectionMode" Value="Single" />
	</Style>

	<Style TargetType="{x:Type controls:ColorPicker}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonNormalBackgroundKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource ColorPickerDarkBorderBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="ButtonStyle" Value="{StaticResource ColorPickerToggleButtonStyle}" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:ColorPicker}">
					<Grid>
						<ToggleButton
							x:Name="PART_ColorPickerToggleButton"
							MinHeight="24"
							Padding="0"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Background="Transparent"
							BorderBrush="Transparent"
							BorderThickness="{TemplateBinding BorderThickness}"
							IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
							IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
							IsTabStop="True"
							Style="{TemplateBinding ButtonStyle}">
							<Grid Margin="3">
								<ContentControl x:Name="ColorOnly" Style="{StaticResource ColorDisplayStyle}" />

								<Border
									x:Name="ColorAndName"
									Background="Transparent"
									Visibility="Hidden">
									<StackPanel Orientation="Horizontal">

										<!--  Displays a color by its solid filled rectangle  -->
										<ContentControl
											Width="20"
											Margin="0"
											HorizontalAlignment="Left"
											BorderBrush="#FFC9CACA"
											BorderThickness="0"
											Style="{StaticResource ColorDisplayStyle}" />

										<!--  Displays the color name (Hex String of a color)  -->
										<Label
											Margin="3,0"
											VerticalAlignment="Center"
											Content="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" />

										<!--  Measuring textblock ensures minimal size  -->
										<Label
											Margin="3,0"
											VerticalAlignment="Center"
											Content="XXXXXX"
											Visibility="Hidden" />
									</StackPanel>
								</Border>
							</Grid>
						</ToggleButton>

						<Popup
							x:Name="PART_ColorPickerPalettePopup"
							VerticalAlignment="Bottom"
							AllowsTransparency="True"
							Focusable="False"
							HorizontalOffset="0"
							IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}"
							PopupAnimation="None"
							StaysOpen="False"
							VerticalOffset="3">
							<Border
								x:Name="PopUpBorder"
								Padding="3"
								Background="{DynamicResource PopupBackgroundBrush}"
								BorderBrush="{DynamicResource ColorPickerDarkBorderBrush}"
								BorderThickness="1">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>

									<Grid
										x:Name="_colorPaletteHost"
										Margin="4"
										Visibility="Collapsed">
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="Auto" />
											<RowDefinition Height="Auto" />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>

										<!--  Available Colors  -->
										<Grid Grid.Row="1" Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
											<Grid>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition />
												</Grid.RowDefinitions>
												<TextBlock
													Margin="3"
													Padding="2"
													Text="{x:Static localiz:Strings.STR_Available_Colors_LABEL}" />
												<ListBox
													x:Name="PART_AvailableColors"
													Grid.Row="1"
													ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"
													Style="{StaticResource ColorListStyle}" />
											</Grid>
										</Grid>

										<!--  Standard Colors  -->
										<Grid Grid.Row="2" Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
											<Grid>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="Auto" />
												</Grid.RowDefinitions>
												<TextBlock
													Margin="3"
													Padding="2"
													Text="{x:Static localiz:Strings.STR_Standard_Colors_LABEL}" />
												<ListBox
													x:Name="PART_StandardColors"
													Grid.Row="1"
													ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"
													Style="{StaticResource ColorListStyle}" />
											</Grid>
										</Grid>

										<!--  Recent Colors  -->
										<Grid
											Grid.Row="3"
											Margin="0,1,0,1"
											Visibility="{TemplateBinding ShowRecentColors,
																		 Converter={StaticResource BooleanToVisibilityConverter}}">
											<Grid>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="Auto" />
												</Grid.RowDefinitions>
												<TextBlock
													Margin="0,1,0,1"
													Padding="2"
													Text="{x:Static localiz:Strings.STR_Recent_Colors_LABEL}" />
												<ListBox
													x:Name="PART_RecentColors"
													Grid.Row="1"
													ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"
													Style="{StaticResource ColorListStyle}" />
											</Grid>
										</Grid>
									</Grid>

									<!--  Shows the ColorCanvas control inside the PopUp of the ColorPicker  -->
									<StackPanel x:Name="_colorCanvasHost" Visibility="Collapsed">
										<controls:ColorCanvas
											x:Name="_colorCanv"
											Background="Transparent"
											BorderThickness="0"
											SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
											UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
									</StackPanel>

									<!--
										Separator Grid.Row="1"
										HorizontalAlignment="Stretch"
										Margin="6,0,6,0"
										Visibility="{TemplateBinding ShowAdvancedButton, Converter={StaticResource BooleanToVisibilityConverter}}" /
									-->

									<!--  More Colors Button  -->
									<Button
										x:Name="PART_ColorModeButton"
										Grid.Row="2"
										Margin="6"
										Visibility="{TemplateBinding ShowAdvancedButton,
																	 Converter={StaticResource BooleanToVisibilityConverter}}" />
								</Grid>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="DisplayColorAndName" Value="True">
							<Setter TargetName="ColorOnly" Property="Visibility" Value="Hidden" />
							<Setter TargetName="ColorAndName" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="ColorMode" Value="ColorPalette">
							<Setter TargetName="_colorPaletteHost" Property="Visibility" Value="Visible" />
							<Setter TargetName="_colorCanvasHost" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_ColorModeButton" Property="Content" Value="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>

						<Trigger Property="ColorMode" Value="ColorCanvas">
							<Setter TargetName="_colorPaletteHost" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="_colorCanvasHost" Property="Visibility" Value="Visible" />
							<Setter TargetName="PART_ColorModeButton" Property="Content" Value="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>

						<Trigger Property="ShowDropDownButton" Value="False">
							<Setter Property="BorderThickness" Value="1" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_ColorPickerToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonFocusedOuterBorderKey}}" />
							<Setter TargetName="PART_ColorPickerToggleButton" Property="Background" Value="Transparent" />
						</Trigger>
						<Trigger Property="IsOpen" Value="True">
							<Setter TargetName="PART_ColorPickerToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedInnerBorderKey}}" />
							<Setter TargetName="PopUpBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.PopUpOpenBorderBrushKey}}" />
							<Setter TargetName="PART_ColorPickerToggleButton" Property="Background" Value="Transparent" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>